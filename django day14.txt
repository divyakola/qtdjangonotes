	Model Relationships
	---------------------
In RDBMS,we can maintain the relationships between the tables in 3-ways,they are

	1). One-to-one relationship
	2). Many-to-one relationship
	3). Many-to-many relationships
	

One-to-one relationship:
----------------------- 
	We can define one-to-one relationship we use django.db.models.OneToOneField

	Ex:- class profile(models.Model):
			----------
			----------
			----------
			User=models.OneToOneField(User,on_delete=models.CASCADE)


Many-to-one relationship:
-----------------------------
	We can define many-to-one relationship we use django.db.models.ForeignKey

	ForeignKey requires a positional argument the class to which the model is related.

Syntax:
	class Post(models.Model):
		----------
		----------
		----------
		author=models.ForeignKey(User,related_name=blog_posts')

	This means an author may have multiple (or) many posts.

Many-to-many relationships:
---------------------------
	We can define many-to-many relationship we use django.db.models.ManyToManyField

	Ex:- class post(models.Model):
			-----------
			----------
			-----------
			Likes=models.ManyToManyField(User,related_name='likes')

	This means a post has multiple likes from multiple authors.

ex1:
---
create django project by using one to one model relationship?

step1:
-----
to create a django project

C:\django7am>myvenv\scripts\activate

(myvenv) C:\django7am>django-admin startproject proj18

step2:
-----
goto project location and to create an application in the project.

(myvenv) C:\django7am>cd proj18

(myvenv) C:\django7am\proj18>python manage.py startapp app18

step3:
------
to install our application in the settings.py file of the project.

	settings.py
	-----------
INSTALLED_APPS = [
  
    'app18'
]	

step4:
-----
to configure the database related settings in the settings.py file of the project.

	settings.py
	-----------
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

step5:
------
to define a models in the models.py file of the application

	models.py
	---------
from django.db import models

# Create your models here.
class Driver(models.Model):
    dname=models.CharField(max_length=20)
    def __str__(self):
        return "Driver Name:%s"%self.dname
class Car(models.Model):
    cnumber=models.IntegerField(primary_key=True)    
    cbrand=models.CharField(max_length=30)
    ctype=models.CharField(max_length=20)
    cdriver=models.OneToOneField(Driver,on_delete=models.CASCADE)
    def __str__(self):
        return "cnumber:%d,cbrand:%s,ctype:%s,cdriver:%s"%(self.cnumber,self.cbrand,self.ctype,self.cdriver)
        

step6:
------
to check the errors in our model

(myvenv) C:\django7am\proj18>python manage.py check

step7:
-----
to create a models(to apply the make migrations)

(myvenv) C:\django7am\proj18>python manage.py makemigrations

step8:
------
to generate the tables in the database(to apply the migrations)

(myvenv) C:\django7am\proj18>python manage.py migrate

step9:
-----
(myvenv) C:\django7am\proj18>python manage.py shell
Python 3.10.1 
(InteractiveConsole)

>>> from app18.models import Driver,Car
>>> d1=Driver(dname="siva")
>>> d1.save()
>>> d1
<Driver: Driver Name:siva>

>>> d2=Driver(dname="krishna")
>>> d2.save()
>>> d2
<Driver: Driver Name:krishna>

>>> c1=Car(cnumber=1089,cbrand="tata",ctype="petrol",cdriver=d1)
>>> c1.save()
>>> c1
<Car: cnumber:1089,cbrand:tata,ctype:petrol,cdriver:Driver Name:siva>	

>>> c2=Car(cnumber=1090,cbrand="kia",ctype="disel",cdriver=d2)
>>> c2.save()
>>> c2
<Car: cnumber:1090,cbrand:kia,ctype:disel,cdriver:Driver Name:krishna>

>>> c3=Car(cnumber=1010,cbrand="toyata",ctype="disel",cdriver=d2)
>>> c3.save()

django.db.utils.IntegrityError: UNIQUE constraint failed: app18_car.cdriver_id

ex2:
----
create django project by using many to one model relationship?

step1:
-----
to create a django project

(myvenv) C:\django7am>django-admin startproject proj19

step2:
-----
goto project location and to create an application in the project

(myvenv) C:\django7am>cd proj19

(myvenv) C:\django7am\proj19>python manage.py startapp app19

step3:
------
to install our application in the settings.py file of the application.

	settings.py
	-----------
INSTALLED_APPS = [
   
    'app19'
]	

step4:
-----
to confgure the database related settings in the settings.py file of the project.

	settings.py
	------------
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

step5:
-----
to create a models in the models.py file of the application

	models.py
	---------
from django.db import models

# Create your models here.
from django.db import models

# Create your models here.
class Owner(models.Model):
    name=models.CharField(max_length=20)
    def __str__(self):
        return "%s"%self.name
class Car(models.Model):
    cnumber=models.IntegerField(primary_key=True)    
    cbrand=models.CharField(max_length=30)
    ctype=models.CharField(max_length=20)
    cowner=models.ForeignKey(Owner,on_delete=models.CASCADE)
    def __str__(self):
        return "cnumber:%d,cbrand:%s,ctype:%s,cowner:%s"%(self.cnumber,self.cbrand,self.ctype,self.cowner)
        
step6:
----
to check the errors in our model

(myvenv) C:\django7am\proj19>python manage.py check

step7:
-----
to create a models(to apply the make migrations)

(myvenv) C:\django7am\proj19>python manage.py makemigrations

step8:
-----
to generate the tables(to apply the migrations)

(myvenv) C:\django7am\proj19>python manage.py migrate

step9:
-----
(myvenv) C:\django7am\proj19>python manage.py shell
Python 3.10.1 
(InteractiveConsole)

>>> from app19.models import Owner,Car
>>> o1=Owner(name="siva")
>>> o1.save()
>>> o1
<Owner: siva>

>>> o2=Owner(name="rama")
>>> o2.save()
>>> o2
<Owner: rama>

>>> c1=Car(cnumber=1010,cbrand="tata",ctype="disel",cowner=o1)
>>> c1.save()
>>> c1
<Car: cnumber:1010,cbrand:tata,ctype:disel,cowner:siva>

>>> c2=Car(cnumber=1020,cbrand="kia",ctype="petrol",cowner=o2)
>>> c2.save()
>>> c2
<Car: cnumber:1020,cbrand:kia,ctype:petrol,cowner:rama>

>>> c3=Car(cnumber=1030,cbrand="toyato",ctype="petrol",cowner=o1)
>>> c3.save()
>>> c3
<Car: cnumber:1030,cbrand:toyato,ctype:petrol,cowner:siva>







